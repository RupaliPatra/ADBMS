db.createCollection('students')

db.students.insertMany([
  { age: 18, grade: 12 },
  { age: 17, grade: 11 },
  { age: 16, grade: 10 },
  { age: 15, grade: 9 }
])

db.students.aggregate([
  { $group: { _id: "$grade", averageAge: { $avg: "$age" } } }
])
// This query uses the `$group` stage to group the documents by the "grade" field and calculate the average age using the `$avg` operator


db.students.createIndex({ grade: 1 }) 
 // To create an index on the "grade" field in the "students" collection, you can use the `createIndex` method.creates an ascending index on the "grade" field.


db.stud.getIndexes() 


Aggregation operations process multiple documents and return computed results. You can use aggregation operations to:
Group values from multiple documents together.
Perform operations on the grouped data to return a single result.
Analyze data changes over time.

Indexing in MongoDB : 
MongoDB uses indexing in order to make the query processing more efficient. If there is no indexing, then the MongoDB must scan every document in the collection and retrieve only those documents that match the query.
db.COLLECTION_NAME.createIndex({KEY:1}) 
The key determines the field on the basis of which you want to create an index and 1 (or -1) determines the order in which these indexes will be arranged(ascending or descending).
