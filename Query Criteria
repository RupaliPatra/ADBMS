db.createCollection('users');

db.users.insertMany([ { name: "John", age: 25, city: "Pune"  }, {}])

//Query Conditionals: You can use comparison operators like `$eq`, `$gt`, `$lt`, `$gte`, `$lte`, and `$ne` to match documents based on specific conditions. 
db.collection.find({ age: { $gt: 25 } });


//OR Queries: You can use the `$or` operator to perform logical OR operations between multiple conditions. 
db.collection.find({ $or: [{ age: 25 }, { city: "Mumbai" }] });


// $not Operator: You can use the `$not` operator to negate a condition. 
db.collection.find({ age: { $not: { $gt: 30 } } });


//Conditional Semantics: You can use conditional semantics to specify multiple conditions. 
db.collection.find({ age: { $gt: 25, $lt: 40 } });


//Type-Specific Queries:
//Null: To find documents where a field is null, you can use the `$type` operator with value 10. 
db.collection.find({ field: { $type: 10 } });


//Regular Expression: To perform pattern matching with regular expressions, you can use the `$regex` operator. 
db.collection.find({ name: { $regex: /john/i } });


//Querying Arrays: To query arrays, you can use operators like `$in`, `$nin`, `$all`, `$elemMatch`, and more. 
db.collection.find({ tags: { $in: ["mongodb", "nosql"] } });



