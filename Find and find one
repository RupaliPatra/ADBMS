db.createCollection("students")

db.students.insertMany([{
  name: "Alice",
  age: 20,
  city: "Mumbai",
  field: "Computer Science",
  gpa: 3.7
},
{
  name: "Bob",
  age: 22,
  city: "Pune",
  field: "Electrical Engineering",
  gpa: 3.9
},
{
  name: "Charlie",
  age: 21,
  city: "Bangalore",
  field: "Mechanical Engineering",
  gpa: 3.6
},
{
  name: "Dave",
  age: 20,
  city: "Mumbai",
  field: "Computer Science",
  gpa: 3.2
}])

//Find all students in the database:
db.students.find()

//Find a student with the name "Alice":
db.students.findOne({ name: "Alice" })

//Find all students who are 20 years old:
db.students.find({ age: 20 })

//Find all students who live in Mumbai:
db.students.find({ city: "Mumbai" })

//Find the oldest student in the database:
db.students.find().sort({ age: -1 }).limit(1)

//Find all students sorted by their age in ascending order:
db.students.find().sort({ age: 1 })

//Find all students who are either from Pune or Bangalore:
db.students.find({ $or: [{ city: "Pune" }, { city: "Bangalore" }] })

//Find all students whose age is greater than 22:
db.students.find({ age: { $gt: 22 } })

//Find all students who are studying computer science:
db.students.find({ field: "Computer Science" })

//Find all students who have a GPA higher than 3.5:
db.students.find({ gpa: { $gt: 3.5 } })

find()` Method:
The `find()` method in MongoDB allows you to query a collection for documents that match certain criteria. It returns a cursor, which is like a pointer to the result set. You can then iterate over the cursor to access the matching documents. This method is useful when you want to retrieve multiple documents that meet your conditions.

`findOne()` Method:
On the other hand, the `findOne()` method in MongoDB is used to query a collection and retrieve a single document that matches the specified criteria. It returns the first document that satisfies the conditions. This method is handy when you only need one specific document that meets your criteria.
